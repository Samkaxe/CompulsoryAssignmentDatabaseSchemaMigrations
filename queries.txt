
-- creating the table products 
/*
CREATE TABLE Products (
        Id INTEGER PRIMARY KEY,
        Name TEXT NOT NULL,
         Price REAL NOT NULL
);
*/

-- creating the table Categories 
/*
CREATE TABLE Categories (
      Id INTEGER PRIMARY KEY,
      Name TEXT NOT NULL
);

 */

-- droping product 
--drop table Products
-- alter the table product to add constrain from category table 
/*
CREATE TABLE Products(
                              Id INTEGER PRIMARY KEY,
                              Name TEXT NOT NULL,
                              Price REAL NOT NULL,
                              category_id INTEGER,
                              FOREIGN KEY (category_id) REFERENCES Categories(Id)
);

 */

-- adding rating table , where rating has foreign key from product table 
/*
CREATE TABLE ProductRatings (
                                Id INTEGER PRIMARY KEY,
                                ProductId INTEGER NOT NULL,
                                Rating INTEGER NOT NULL,
                                Review TEXT,
                                FOREIGN KEY (ProductId) REFERENCES Products(Id)
);

 */

/*
-- testing and validation the table with mock data 

--Adding Mock Data to Categories
INSERT INTO Categories (Name) VALUES ('Electronics');
INSERT INTO Categories (Name) VALUES ('Books');
INSERT INTO Categories (Name) VALUES ('Home Appliances');

--Adding Mock Data to Products
INSERT INTO Products (Name, Price, category_id) VALUES ('Laptop', 1200.00, 1);
INSERT INTO Products (Name, Price, category_id) VALUES ('Smartphone', 800.00, 1);
INSERT INTO Products (Name, Price, category_id) VALUES ('Database Systems', 59.99, 2);
INSERT INTO Products (Name, Price, category_id) VALUES ('Python Programming', 39.99, 2);
INSERT INTO Products (Name, Price, category_id) VALUES ('Microwave Oven', 99.99, 3);
INSERT INTO Products (Name, Price, category_id) VALUES ('Vacuum Cleaner', 149.99, 3);

--Adding Mock Data to ProductRatings
INSERT INTO ProductRatings (ProductId, Rating, Review) VALUES (1, 5, 'Excellent laptop with high performance.');
INSERT INTO ProductRatings (ProductId, Rating, Review) VALUES (1, 4, 'Good but battery life could be better.');
INSERT INTO ProductRatings (ProductId, Rating, Review) VALUES (2, 4, 'Very reliable and fast.');
INSERT INTO ProductRatings (ProductId, Rating, Review) VALUES (3, 5, 'Comprehensive and detailed. Highly recommended.');
INSERT INTO ProductRatings (ProductId, Rating, Review) VALUES (4, 5, 'Great for beginners and advanced programmers alike.');

 */



--------------------------------------------------------------------------------------

/*
 SQLite enforces referential integrity,
 which means it does not allow the removal of a table if its primary key (PK) is being referenced as a foreign key (FK) 
 in another table. To execute a rollback plan correctly while adhering to these constraints,
 it's essential to carefully sequence the dropping of tables in reverse order of their dependency chain.

Here is an improved approach for rolling back our schema changes:

Drop the ProductRatings Table:
Begin by dropping the ProductRatings table, as it is the most dependent, 
 referencing the Products table through a foreign key.

DROP TABLE IF EXISTS ProductRatings;
 
Drop the Products Table:
Next, drop the Products table. Since we've removed the ProductRatings table already, 
 there are no longer any foreign key constraints preventing this operation.

DROP TABLE IF EXISTS Products;
 
Drop the Categories Table:
Finally, with the Products table (which referenced Categories through a foreign key) now removed,
 you can safely drop the Categories table.

DROP TABLE IF EXISTS Categories;
 */
 
 /*
  or we can do this 
  Disable Foreign Key Checks Temporarily (if supported by your DBMS): 
  Some databases allow you to temporarily disable foreign key checks to perform operations that would 
  otherwise be restricted. For SQLite, you can do:

PRAGMA foreign_keys = OFF;
*/